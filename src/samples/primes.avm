# <int:n> primes_slow <int:prime_0> ... <int:primeM>
#
# primes_slow(n):
# 
# return all the primes upto n, in a extremely ineficient manner
@primes_slow
{
    mark swap
    dup 3 gt
    {
        @np 1 def
        2 swap 3 swap 5 swap
        5 aset
        @n swap def
        0 1 $n
        # for 2 .. (n)
        {
            # <M> Po .... Pn c
            aget swap 1 and eqz
            {
                2
            }
            {
                4
            }
            ifelse add aset aget
            dup $n gt
            {
                pop
                break
            }
            if
            
            @save 1 def
            
            $np -1 1
            {
                # <M> a b c Po .... Pn i j
                index 
                # <M> .... Pn i Pj
                3 times
                mul
                # <M> .... Pn i Pj Pj2
                2 index 
                # M ... Pn i Pj Pj2 i
                lte
                {
                    # M ... Pn i Pj
                    1 index 3 1 roll
                    # M ...Pn i i Pj
                    mod
                    # M ... Pn i m
                    EqZ
                    {
                        @save 0 def
                        break
                    }
                    if
                }
                {
                    # M ... Pn i Pj
                    pop
                    break
                }
                ifelse
            }
            for

            $save eqz
            {
                pop
            }
            {
                @np $np inc def
            }
            ifelse
        }
        for
    }
    {
        dup
        2 gte
        {
            dup 3 eq
            {
                2 swap
            }
            {
            }
            ifelse
        }
        {
            pop
        }
        ifelse
    }
    ifelse
}
def

1000000 $primes_slow
