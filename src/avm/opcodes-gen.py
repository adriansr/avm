#/usr/bin/python

class Generator:
    def __init__(self):
        self._lines = []

    def add(self, lines):
        if isinstance(lines,str):
            self._lines.append(lines + '\n')
        else:
            for l in lines:
                self._lines.append(l + '\n')
    

    def finish(self):
        self.terminate()
        
        name = self.destination()
        f = open(name, 'w')

        f.writelines(self._lines)
        f.close()

        print "Generated file {0}".format(name)

class OpcodesHeaderGenerator(Generator):

    def __init__(self):

        Generator.__init__(self)

        self.add(['#ifndef OPCODES_H_INCLUDED',
                  '#define OPCODES_H_INCLUDED',
                  '',
                  '/* THIS FILE IS AUTOGENERATED: DO NOT EDIT */',
                  '',
                  'typedef enum',
                  '{'])
        
    def onOpcode(self, hexcode, name, opcodes):
        if name is not None:
            self.add('AVMOpcode{0:16s} = {1},'.format(name, hexcode))
    
    def terminate(self):
        self.add(['',
                  '} AVMOpcode;',
                  '',
                  '#endif // OPCODES_H_INCLUDED'])
    
    def destination(self):
        return 'generated/opcodes.h'


class ParserDeclarationGenerator(Generator):

    def __init__(self):

        Generator.__init__(self)

        self.add(['#ifndef PARSERS_H_INCLUDED',
                  '#define PARSERS_H_INCLUDED',
                  '',
                  '/* THIS FILE IS AUTOGENERATED: DO NOT EDIT */',
                  ''])
        
    def onOpcode(self, hexcode, name, opcodes):
        if name is not None:
            self.add('static AVMError _parse_{0}(AVM vm);'.format(name))
    
    def terminate(self):
        self.add(['',
                  '#endif // PARSERS_H_INCLUDED'])
    
    def destination(self):
        return 'generated/parsers-decl.h'

class ParserTableGenerator(Generator):

    def __init__(self):

        Generator.__init__(self)

        self.add(['#ifndef PARSER_TABLE_H_INCLUDED',
                  '#define PARSER_TABLE_H_INCLUDED',
                  '',
                  '/* THIS FILE IS AUTOGENERATED: DO NOT EDIT */',
                  '',
                  'AVMError ( *PARSER_TABLE[256] )(AVM) = {'
                  ])
        
    def onOpcode(self, hexcode, name, opcodes):
        if name is not None:
            self.add('    _parse_{0},'.format(name))
        else:
            self.add('    NULL,')
    
    def terminate(self):
        self.add(['};',
                  '',
                  '#endif // PARSER_TABLE_H_INCLUDED'])
    
    def destination(self):
        return 'generated/parser-table.h'

class OpcodeNameTableGenerator(Generator):

    def __init__(self):

        Generator.__init__(self)

        self.add(['#ifndef OPCODE_NAME_TABLE_H_INCLUDED',
                  '#define OPCODE_NAME_TABLE_H_INCLUDED',
                  '',
                  '/* THIS FILE IS AUTOGENERATED: DO NOT EDIT */',
                  '',
                  'static struct {',
                  '    const char *name;',
                  '    AVMOpcode   op;',
                  '}',
                  'OPCODE_TABLE[] = {'
                  ])
        
    def onOpcode(self, hexcode, name, opcodes):
        if name is not None:
            for op in opcodes:
                self.add('    {'+'"{0}", AVMOpcode{1}'.format(op,name)+'},')
    
    def terminate(self):
        self.add(['    {NULL, 0}',
                  '};',
                  '',
                  '#endif // OPCODE_NAME_TABLE_H_INCLUDED'])
    
    def destination(self):
        return 'generated/opcode-name-table.h'


generators = []
generators.append( OpcodesHeaderGenerator() )
generators.append( ParserDeclarationGenerator() )
generators.append( ParserTableGenerator() )
generators.append( OpcodeNameTableGenerator() )

f = open('opcodes.list', 'r')

lines = f.readlines(300) # not really big, aprox 256

for line in lines:
    cmt = line.find('#')
    if cmt >= 0:
        line = line[:cmt]

    line  = line.strip().strip('\r\n')
    parts = line.split()

    nparts = len(parts)

    hexcode = parts[0]
    defcode = parts[1] if nparts>1 else None
    opcodes = parts[2:]

#print 'Found opcode {0} def {1} opcodes{2}'.format(hexcode,defcode,opcodes)

    for g in generators:
        g.onOpcode(hexcode,defcode,opcodes)


for g in generators:
    
    g.finish()

